2019/06/21

環境変数

- AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY
- TASKNAME
- TIMELIMIT
- DB_URL, DB_USER, DB_PASS

alpine上でinstallしたcrystalがまともに動かん
https://github.com/sam0x17/crystal-alpine
を参考に色々ライブラリ足した（alpineを使っている意味が…）
→やっぱりサイズでかくなってしまって意味がないのでベースイメージはcrystalのものを使おう

DBテーブル定義
CREATE TABLE results (
	id INTEGER UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
	task VARCHAR(255) NOT NULL,
	created_at DATETIME NOT NULL, 
	score INTEGER UNSIGNED NOT NULL,
	commands MEDIUMTEXT,
	options JSON DEFAULT NULL
);


2019/06/22 12:18

AWS BatchでS3からソースコード取得→実行→結果をRDSに入れる
までできた

AWS ACCESS KEY系はIAM Roleでやるから渡す必要なかった
AWS BatchにどうやってDBの認証情報渡せばいいんだ…ソースコード内には書きたくないが
よくわからんので仕方ないがプレインテキストの環境変数かなあ

手元からジョブを投げられるようにする

12:50

投げることはできた
https://qiita.com/aokad/items/aed8034fb087a6bf99c3
が、RUNNABLEから動かない…
スポットリクエスト作られてないなあ→数分待ったら作られた
OK

ごはん


13:52

テストケースのビジュアライズしよっと
その前にまずはパースやな

17:00

とりあえずのパーサはできた。

テストケースの情報もDBに入れとこう

CREATE TABLE tasks (
	name VARCHAR(255) PRIMARY KEY NOT NULL,
	height INTEGER UNSIGNED NOT NULL,
	width INTEGER UNSIGNED NOT NULL,
	empty INTEGER UNSIGNED NOT NULL,
	booster_b INTEGER UNSIGNED NOT NULL,
	booster_f INTEGER UNSIGNED NOT NULL,
	booster_l INTEGER UNSIGNED NOT NULL,
	booster_x INTEGER UNSIGNED NOT NULL,
	booster_r INTEGER UNSIGNED NOT NULL,
	booster_c INTEGER UNSIGNED NOT NULL
);

MySQLのデフォルトのCOLLATIONって latin1_swedish_ci ってやつなのか

300ケースの満点スコア出してみたら 4219281.834526764 だった

18:50

順位表データをとりあえず10分おきに取得しておこう
LambdaのトリガーにCloudWatch Eventを使おうとしたらスケジュールのcronで曜日フィールドに*を使えない仕様にちょっとハマった

19:40

最後のルール読んだが下位チームには何の影響もないやつだった
ふつうにソルバーをつくろう

テストデータの画像化やっとくかな
→Crystalによさげな画像処理ライブラリがないのでやっぱやめた

21:47

粛々と最初のgreedyソルバを実装する。
明日の昼過ぎぐらいまでにできてるといいな


12:43
昼過ぎまで寝てしまったね

AWS Batchでの実行は1テストケースだけにしてたけど複数まとめてできた方が良いと思うので範囲で指定できるようにしよう
そのうち。

visible判定、これっぽいの前にマラソンマッチでやったなあ

21:14

ひととおりソルバできた。ビジュアライザで見るとめっちゃ頭悪い感じだけどとりあえずvalidな解は出してるっぽい。

10ケースx30ジョブでキューに投げてみる
→ちゃんと並列で実行してくれてる。楽しい

24:00

RDSからベストスコアのやつを取ってきてzipにするのを書いた。

サブミットした。満点の半分ほど取っててなんだか思いのほか高いスコアだ
公式が各ケースの生スコアを教えてくれるのをサブミットしてみて初めて知った。手元と同一っぽい。よかった。


Fを使うのを実装する

25:00

F使った。継続時間の仕様が思ってたのと1ずれててちょっとハマった。
そこまで劇的に良くはならず。

ドリルを使うより先に、wrapする順序を賢くして塗り残しをなくすのをやった方がよさそう

26:00

…とその前にジョブに投げてた奴らが死んでる。
wheel使ったとき、残りが狭い通路の向こうにあるとスピードアップした状態では通り抜けられなくて到達不可能になってた。

そのような場合は近づく向きに移動するよう修正

prob-001 がめっちゃ小さいので手で作った


28:00

boosterを積極的に取りに行くようにするとだいぶ良くなっている
サブミットしてみたらたくさんfailが出た…
回転して移動パターンでcreate_planをするときにwheelの継続時間が回転した分短くなるんだなあ
ついでにアホみたいなバグも見つかってくれて結果オーライな感じ

各ケース20分ずつ実行するバッチを流して寝る



